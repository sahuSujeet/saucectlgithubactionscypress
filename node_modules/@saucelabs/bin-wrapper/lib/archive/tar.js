"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTar = exports.unpackTar = void 0;
const tar_stream_1 = __importDefault(require("tar-stream"));
const stream_1 = require("stream");
async function unpackTar(buf) {
    return new Promise((resolve, reject) => {
        const xtract = tar_stream_1.default.extract();
        const files = [];
        xtract.on('entry', async (header, stream, next) => {
            files.push({
                data: await readAll(stream),
                path: header.name,
            });
            next();
        });
        stream_1.Readable.from(buf)
            .pipe(xtract)
            .on('finish', () => resolve(files))
            .on('error', (error) => reject(error));
    });
}
exports.unpackTar = unpackTar;
function isTar(b) {
    if (!b || b.byteLength < 262) {
        return false;
    }
    return (b[257] === 0x75 &&
        b[258] === 0x73 &&
        b[259] === 0x74 &&
        b[260] === 0x61 &&
        b[261] === 0x72);
}
exports.isTar = isTar;
async function readAll(stream) {
    return new Promise((callback) => {
        const data = [];
        stream.on('data', (chunk) => {
            data.push(chunk);
        });
        stream.on('end', () => {
            callback(Buffer.concat(data));
        });
    });
}
exports.default = { isTar, unpackTar };
