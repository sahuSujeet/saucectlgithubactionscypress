/// <reference types="node" />
import { OutputStreams } from './run';
type OS = 'aix' | 'darwin' | 'freebsd' | 'linux' | 'openbsd' | 'sunos' | 'win32';
type Arch = 'arm' | 'arm64' | 'ia32' | 'mips' | 'mipsel' | 'ppc' | 'ppc64' | 's390' | 's390x' | 'x64';
export type Headers = {
    [key: string]: string;
};
export type HttpOptions = {
    headers?: Headers;
};
export declare class BinWrapper {
    private options;
    private sources;
    private binPath;
    private binName;
    src(path: URL, os: OS, arch: Arch): BinWrapper;
    dest(path: string): BinWrapper;
    use(name: string): BinWrapper;
    httpOptions(options: HttpOptions): BinWrapper;
    install(): Promise<void>;
    run(args: string[], stdio?: OutputStreams): Promise<number>;
    private isBinPresent;
    private findMatchingPlatform;
    path(): string;
}
export {};
//# sourceMappingURL=index.d.ts.map